import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@FunctionalInterface
interface demo{
    void disp();

}

/*class Plane{
    public void planeFliesAtGoodHeight(){
        System.out.println("Plane is flying");
    }
}
class CargoPlane extends Plane{
    //Overriden Method from Parent Class
    @Override
    public void planeFliesAtGoodHeight(){
        System.out.println("Cargo Plane flies low");
    }
}*/
@Target({ElementType.TYPE,ElementType.FIELD,ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@interface CricketPlayer{
    String country();
    int age() default 34;
}
@CricketPlayer(country = "India")
class Virat{
    int innings;
    int runs;

    public int getRuns() {
        return runs;
    }

    public void setRuns(int runs) {
        this.runs = runs;
    }

    public int getInnings() {
        return innings;
    }

    public void setInnings(int innings) {
        this.innings = innings;
    }

}

public class Annotation {
    public static void main(String[] args) {
      // Plane cp = new CargoPlane();
        //cp.planeFliesAtGoodHeight();
        Virat v = new Virat();
        v.setInnings(300);
        v.setRuns(100000);

        System.out.println(v.getInnings());
        System.out.println(v.getRuns());

      /* Class c =  v.getClass();
      Annotation a = (Annotation) c.getAnnotation(CricketPlayer.class);
      CricketPlayer cp = (CricketPlayer)a;

        System.out.println(cp.country());
        System.out.println(cp.age());*/
    }
}
